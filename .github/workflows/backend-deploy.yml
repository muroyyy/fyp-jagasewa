name: Backend Deploy via ECR

on:
  push:
    branches: [main]
    paths: ['backend/**']
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy to EC2 Instance via SSM
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get EC2 instance ID
        INSTANCE_ID="${{ secrets.INSTANCE_ID }}"
        
        if [ -z "$INSTANCE_ID" ]; then
          echo "‚ùå No instance ID found"
          exit 1
        fi
        
        # Check if instance is running
        INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].State.Name' --output text)
        if [ "$INSTANCE_STATE" != "running" ]; then
          echo "‚ùå Instance $INSTANCE_ID is not running (state: $INSTANCE_STATE)"
          exit 1
        fi
        
        IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "üöÄ Deploying image $IMAGE_URI to instance: $INSTANCE_ID"
        
        # Deploy to EC2 instance
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=[
            \"aws ecr get-login-password --region ap-southeast-1 | sudo docker login --username AWS --password-stdin $ECR_REGISTRY\",
            \"sudo docker stop \$(sudo docker ps -q) || true\",
            \"sudo docker rm \$(sudo docker ps -aq) || true\",
            \"sudo docker pull $IMAGE_URI\",
            \"sudo docker run -d --name jagasewa-backend -p 80:80 --restart unless-stopped -e AWS_DEFAULT_REGION=ap-southeast-1 -e DB_SECRET_NAME=jagasewa-db-credentials-prod $IMAGE_URI\",
            \"sudo docker system prune -f\"
          ]" \
          --region ap-southeast-1 \
          --query 'Command.CommandId' --output text)
        
        echo "üìã Command ID: $COMMAND_ID"
        echo "‚è≥ Waiting for deployment to complete..."
        
        # Wait for command completion (poll every 10 seconds)
        for i in {1..30}; do
          STATUS=$(aws ssm get-command-invocation --command-id $COMMAND_ID --instance-id $INSTANCE_ID --region ap-southeast-1 --query 'Status' --output text 2>/dev/null || echo "InProgress")
          if [ "$STATUS" != "InProgress" ]; then
            break
          fi
          echo "‚è≥ Still deploying... ($i/30)"
          sleep 10
        done
        
        # Check results
        STATUS=$(aws ssm get-command-invocation --command-id $COMMAND_ID --instance-id $INSTANCE_ID --region ap-southeast-1 --query 'Status' --output text)
        
        if [ "$STATUS" = "Failed" ]; then
          echo "‚ùå Deployment failed on instance $INSTANCE_ID"
          aws ssm get-command-invocation --command-id $COMMAND_ID --instance-id $INSTANCE_ID --region ap-southeast-1 --query '{InstanceId:InstanceId,Status:Status,StandardErrorContent:StandardErrorContent}' --output table
          exit 1
        fi
        
        echo "‚úÖ Deployment completed successfully on instance $INSTANCE_ID"