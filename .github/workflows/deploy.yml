name: Deploy to EC2 via S3

on:
  push:
    branches:
      - main   # trigger on push to main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create deployment package
        run: |
          # Create a timestamped zip file (UTC+8)
          TIMESTAMP=$(TZ='Asia/Kuala_Lumpur' date +%Y%m%d_%H%M%S)
          ZIP_NAME="jagasewa-${TIMESTAMP}.zip"
          zip -r $ZIP_NAME . -x "*.git*" "node_modules/*" ".env*"
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "‚úÖ Created package: $ZIP_NAME"

      - name: Upload to S3
        run: |
          aws s3 cp ${{ env.ZIP_NAME }} s3://${{ secrets.S3_BUCKET_NAME }}/deployments/${{ env.ZIP_NAME }}
          echo ${{ env.ZIP_NAME }} > latest.txt
          aws s3 cp latest.txt s3://${{ secrets.S3_BUCKET_NAME }}/deployments/latest.txt
          echo "‚úÖ Uploaded to S3: ${{ env.ZIP_NAME }}"

      - name: Trigger EC2 deployment
        id: deploy
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy from S3: ${{ env.ZIP_NAME }}" \
            --region "${{ secrets.AWS_REGION }}" \
            --parameters 'commands=[
              "#!/bin/bash",
              "set -e",
              "echo \"üöÄ Starting deployment...\"",
              "cd /srv",
              "LATEST=$(aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/deployments/latest.txt - 2>/dev/null || echo \"\")",
              "if [ -z \"$LATEST\" ]; then echo \"‚ùå Error: Could not read latest.txt\"; exit 1; fi",
              "echo \"üì¶ Downloading: $LATEST\"",
              "aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/deployments/$LATEST /tmp/$LATEST",
              "echo \"üõë Stopping and removing old containers...\"",
              "cd /srv/fyp-jagasewa || mkdir -p /srv/fyp-jagasewa",
              "docker compose down -v 2>/dev/null || docker-compose down -v 2>/dev/null || true",
              "docker rm -f jagasewa_backend jagasewa_frontend 2>/dev/null || true",
              "docker network prune -f 2>/dev/null || true",
              "echo \"üìÇ Extracting new code...\"",
              "rm -rf /srv/fyp-jagasewa/* || true",
              "unzip -o /tmp/$LATEST -d /srv/fyp-jagasewa",
              "cd /srv/fyp-jagasewa",
              "echo \"üî® Building containers...\"",
              "docker compose build --no-cache || docker-compose build --no-cache",
              "echo \"‚ñ∂Ô∏è  Starting containers...\"",
              "docker compose up -d || docker-compose up -d",
              "echo \"üßπ Cleaning up...\"",
              "rm /tmp/$LATEST",
              "echo \"‚úÖ Deployment complete!\"",
              "docker ps"
            ]' \
            --output text \
            --query "Command.CommandId")
          
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV
          echo "üì° Command ID: $COMMAND_ID"

      - name: Wait for deployment to complete
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          
          # Wait a bit for command to start
          sleep 15
          
          for i in {1..20}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "${{ env.COMMAND_ID }}" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --region "${{ secrets.AWS_REGION }}" \
              --query "Status" \
              --output text 2>/dev/null || echo "Pending")
            
            echo "‚è±Ô∏è  Check $i/20: $STATUS"
            
            if [ "$STATUS" = "Success" ]; then
              echo "‚úÖ Deployment completed successfully!"
              
              # Get the output
              aws ssm get-command-invocation \
                --command-id "${{ env.COMMAND_ID }}" \
                --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                --region "${{ secrets.AWS_REGION }}" \
                --query "StandardOutputContent" \
                --output text | tail -20
              
              exit 0
            elif [ "$STATUS" = "Failed" ]; then
              echo "‚ùå Deployment failed!"
              
              # Show error
              aws ssm get-command-invocation \
                --command-id "${{ env.COMMAND_ID }}" \
                --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                --region "${{ secrets.AWS_REGION }}" \
                --query "StandardErrorContent" \
                --output text
              
              exit 1
            elif [ "$STATUS" = "InProgress" ]; then
              echo "üîÑ Deployment in progress..."
            fi
            
            sleep 15
          done
          
          echo "‚ö†Ô∏è  Timeout waiting for status, but deployment may have succeeded"
          echo "üîç Checking if containers are running..."
          
          # Even if status check times out, verify containers are up
          sleep 10
          
          VERIFY_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --region "${{ secrets.AWS_REGION }}" \
            --parameters 'commands=["docker ps --format \"table {{.Names}}\t{{.Status}}\""]' \
            --output text \
            --query "Command.CommandId")
          
          sleep 5
          
          CONTAINERS=$(aws ssm get-command-invocation \
            --command-id "$VERIFY_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region "${{ secrets.AWS_REGION }}" \
            --query "StandardOutputContent" \
            --output text)
          
          echo "$CONTAINERS"
          
          if echo "$CONTAINERS" | grep -q "jagasewa"; then
            echo "‚úÖ Containers are running! Deployment successful despite status timeout."
            exit 0
          else
            echo "‚ùå Containers not found. Deployment may have failed."
            exit 1
          fi

      - name: Verify deployment
        if: success()
        run: |
          echo "üîç Final verification - checking container status..."
          
          VERIFY_CMD=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --region "${{ secrets.AWS_REGION }}" \
            --parameters 'commands=["cd /srv/fyp-jagasewa && docker ps"]' \
            --output text \
            --query "Command.CommandId")
          
          sleep 5
          
          aws ssm get-command-invocation \
            --command-id "$VERIFY_CMD" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region "${{ secrets.AWS_REGION }}" \
            --query "StandardOutputContent" \
            --output text
          
          echo "‚úÖ Deployment verification complete!"